package com.io.sdchain.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.io.sdchain.bean.MsgBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG_BEAN".
*/
public class MsgBeanDao extends AbstractDao<MsgBean, Long> {

    public static final String TABLENAME = "MSG_BEAN";

    /**
     * Properties of entity MsgBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property ReadStatus = new Property(2, boolean.class, "readStatus", false, "READ_STATUS");
        public final static Property Hash = new Property(3, String.class, "hash", false, "HASH");
        public final static Property Ledger = new Property(4, String.class, "ledger", false, "LEDGER");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property Source_account = new Property(6, String.class, "source_account", false, "SOURCE_ACCOUNT");
        public final static Property Destination_account = new Property(7, String.class, "destination_account", false, "DESTINATION_ACCOUNT");
        public final static Property Currency = new Property(8, String.class, "currency", false, "CURRENCY");
        public final static Property Value = new Property(9, String.class, "value", false, "VALUE");
        public final static Property Issuer = new Property(10, String.class, "issuer", false, "ISSUER");
        public final static Property Direction = new Property(11, String.class, "direction", false, "DIRECTION");
        public final static Property Timestamp = new Property(12, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property Fee = new Property(13, String.class, "fee", false, "FEE");
        public final static Property MemoData = new Property(14, String.class, "memoData", false, "MEMO_DATA");
        public final static Property Success = new Property(15, boolean.class, "success", false, "SUCCESS");
        public final static Property Account = new Property(16, String.class, "account", false, "ACCOUNT");
        public final static Property Date = new Property(17, String.class, "date", false, "DATE");
    }


    public MsgBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MsgBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"READ_STATUS\" INTEGER NOT NULL ," + // 2: readStatus
                "\"HASH\" TEXT," + // 3: hash
                "\"LEDGER\" TEXT," + // 4: ledger
                "\"STATUS\" TEXT," + // 5: status
                "\"SOURCE_ACCOUNT\" TEXT," + // 6: source_account
                "\"DESTINATION_ACCOUNT\" TEXT," + // 7: destination_account
                "\"CURRENCY\" TEXT," + // 8: currency
                "\"VALUE\" TEXT," + // 9: value
                "\"ISSUER\" TEXT," + // 10: issuer
                "\"DIRECTION\" TEXT," + // 11: direction
                "\"TIMESTAMP\" TEXT," + // 12: timestamp
                "\"FEE\" TEXT," + // 13: fee
                "\"MEMO_DATA\" TEXT," + // 14: memoData
                "\"SUCCESS\" INTEGER NOT NULL ," + // 15: success
                "\"ACCOUNT\" TEXT," + // 16: account
                "\"DATE\" TEXT);"); // 17: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MsgBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getReadStatus() ? 1L: 0L);
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(4, hash);
        }
 
        String ledger = entity.getLedger();
        if (ledger != null) {
            stmt.bindString(5, ledger);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String source_account = entity.getSource_account();
        if (source_account != null) {
            stmt.bindString(7, source_account);
        }
 
        String destination_account = entity.getDestination_account();
        if (destination_account != null) {
            stmt.bindString(8, destination_account);
        }
 
        String currency = entity.getCurrency();
        if (currency != null) {
            stmt.bindString(9, currency);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(10, value);
        }
 
        String issuer = entity.getIssuer();
        if (issuer != null) {
            stmt.bindString(11, issuer);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(12, direction);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(13, timestamp);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(14, fee);
        }
 
        String memoData = entity.getMemoData();
        if (memoData != null) {
            stmt.bindString(15, memoData);
        }
        stmt.bindLong(16, entity.getSuccess() ? 1L: 0L);
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(17, account);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(18, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MsgBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getReadStatus() ? 1L: 0L);
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(4, hash);
        }
 
        String ledger = entity.getLedger();
        if (ledger != null) {
            stmt.bindString(5, ledger);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String source_account = entity.getSource_account();
        if (source_account != null) {
            stmt.bindString(7, source_account);
        }
 
        String destination_account = entity.getDestination_account();
        if (destination_account != null) {
            stmt.bindString(8, destination_account);
        }
 
        String currency = entity.getCurrency();
        if (currency != null) {
            stmt.bindString(9, currency);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(10, value);
        }
 
        String issuer = entity.getIssuer();
        if (issuer != null) {
            stmt.bindString(11, issuer);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(12, direction);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(13, timestamp);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(14, fee);
        }
 
        String memoData = entity.getMemoData();
        if (memoData != null) {
            stmt.bindString(15, memoData);
        }
        stmt.bindLong(16, entity.getSuccess() ? 1L: 0L);
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(17, account);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(18, date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MsgBean readEntity(Cursor cursor, int offset) {
        MsgBean entity = new MsgBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.getShort(offset + 2) != 0, // readStatus
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hash
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ledger
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // source_account
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // destination_account
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // currency
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // value
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // issuer
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // direction
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // timestamp
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fee
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // memoData
            cursor.getShort(offset + 15) != 0, // success
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // account
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MsgBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReadStatus(cursor.getShort(offset + 2) != 0);
        entity.setHash(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLedger(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSource_account(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDestination_account(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCurrency(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setValue(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIssuer(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDirection(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTimestamp(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFee(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMemoData(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSuccess(cursor.getShort(offset + 15) != 0);
        entity.setAccount(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDate(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MsgBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MsgBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MsgBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
